{
    "Singleton": {
		"prefix": "singleton",
		"body": [
			"var Singleton = (function () {",
			"\tvar instance;",
				"\tfunction createInstance() {",
					"\t\tvar object = new Object(\"I am the instance\");",
					"\t\treturn object;",
				"\t}",
				"",
				"\treturn {",
					"\t\tgetInstance: function () {",
						"\t\t\tif (!instance)",
							"\t\t\t\tinstance = createInstance();",
						"\t\t\treturn instance;",
					"\t\t}",
				"\t};",
			"})();",

			"",
			"function run() {",
				"\tvar instance1 = Singleton.getInstance();",
				"\tvar instance2 = Singleton.getInstance();",
				"\talert(\"Same instance? \" + (instance1 === instance2));",
			"}"
		],
		"description": "Code snippet for singleton design pattern."
	},
	"Builder": {
		"prefix": "builder",
		"body": [
			"function Shop() {",
				"\tthis.construct = function(builder) {",
					"\t\tbuilder.step1();",
					"\t\tbuilder.step2();",
					"\t\treturn builder.get();",
				"\t}",
			"}",

			"",
			"function CarBuilder() {",
				"\tthis.car = null;",
				"\tthis.step1 = function() {",
					"\t\tthis.car = new Car();",
				"\t};",
				"",
				"\tthis.step2 = function() {",
					"\t\tthis.car.addParts();",
				"\t};",
				"",
				"\tthis.get = function() {",
					"\t\treturn this.car;",
				"\t};",
			"}",

			"",
			"function TruckBuilder() {",
				"\tthis.truck = null;",
				"\tthis.step1 = function() {",
					"\t\tthis.truck = new Truck();",
				"\t};",
				"",
				"\tthis.step2 = function() {",
					"\t\tthis.truck.addParts();",
				"\t};",
				"",
				"\tthis.get = function() {",
					"\t\treturn this.truck;",
				"\t};",
			"}",

			"",
			"function Car() {",
				"\tthis.doors = 0;",
				"",
				"\tthis.addParts = function() {",
					"\t\tthis.doors = 4;",
				"\t};",
				"",
				"\tthis.say = function() {",
					"\t\tlog.add(\"I am a \" + this.doors + \"-door car\");",
				"\t};",
			"}",

			"",
			"function Truck() {",
				"\tthis.doors = 0;",
				"",
				"\tthis.addParts = function() {",
					"\t\tthis.doors = 2;",
				"\t};",
				"",
				"\tthis.say = function() {",
					"\t\tlog.add(\"I am a \" + this.doors + \"-door truck\");",
				"\t};",
			"}",

			"",
			"// log helper",
			"var log = (function () {",
				"\tvar log = \"\";",
				"\treturn {",
					"\t\tadd: function (msg) { log += msg + \"\"; },",
					"\t\tshow: function () { alert(log); log = \"\"; }",
				"\t}",
			"})();",

			"",
			"function run() {",
				"\tvar shop = new Shop();",
				"\tvar carBuilder = new CarBuilder();",
				"\tvar truckBuilder = new TruckBuilder();",
				"\tvar car = shop.construct(carBuilder);",
				"\tvar truck = shop.construct(truckBuilder);",
				"\tcar.say();",
				"\ttruck.say();",
				"\tlog.show();",
			"}"
		],
		"description": "Code snippet for builder design pattern."
	},
	"Adapter": {
		"prefix": "adapter",
		"body": [
			"// old interface",
			"",
			"function Shipping() {",
				"\tthis.request = function(zipStart, zipEnd, weight) {",
					"\t\t// ...",
					"\t\treturn \"$49.75\";",
				"\t}",
			"}",
			"",
			"// new interface",
			"",
			"function AdvancedShipping() {",
				"\tthis.login = function(credentials) { /* ... */ };",
				"\tthis.setStart = function(start) { /* ... */ };",
				"\tthis.setDestination = function(destination) { /* ... */ };",
				"\tthis.calculate = function(weight) { return \"$39.50\"; };",
			"}",
			"",
			"// adapter interface",
			"",
			"function ShippingAdapter(credentials) {",
				"\tvar shipping = new AdvancedShipping();",
				"\tshipping.login(credentials);",
				"",
				"\treturn {",
					"\t\trequest: function(zipStart, zipEnd, weight) {",
						"\t\t\tshipping.setStart(zipStart);",
						"\t\t\tshipping.setDestination(zipEnd);",
						"\t\t\treturn shipping.calculate(weight);",
					"\t\t}",
				"\t};",
			"}",
			"",
			"// log helper",
			"",
			"var log = (function () {",
				"\tvar log = \"\";",
				"\treturn {",
					"\t\tadd: function (msg) { log += msg + \"\"; },",
					"\t\tshow: function () { alert(log); log = \"\"; }",
			"})();",

			"function run() {",
				"\tvar shipping = new Shipping();",
				"\tvar credentials = {token: \"30a8-6ee1\"};",
				"\tvar adapter = new ShippingAdapter(credentials);",
				"",
				"\t// original shipping object and interface",
				"",
				"\tvar cost = shipping.request(\"78701\", \"10010\", \"2 lbs\");",
				"\tlog.add(\"Old cost: \" + cost);",
				"",
				"\t// new shipping object with adapted interface",
				"",
				"\tcost = adapter.request(\"78701\", \"10010\", \"2 lbs\");",
				"\tlog.add(\"New cost: \" + cost);",
				"\tlog.show();",
			"}"
		],
		"description": "Code snippet for adapter design pattern."
	},
	"Observer": {
		"prefix": "observer",
		"body": [
			"function Click() {",
    			"\tthis.handlers = [];  // observers",
			"}",
			"",
			"Click.prototype = {",
				"\tsubscribe: function(fn) {",
					"\t\tthis.handlers.push(fn);",
				"\t},",
				"",
				"\tunsubscribe: function(fn) {",
					"\t\tthis.handlers = this.handlers.filter(",
						"\t\t\tfunction(item) {",
							"\t\t\t\tif (item !== fn) {",
								"\t\t\t\t\treturn item;",
							"\t\t\t\t}",
						"\t\t\t}",
					"\t\t);",
				"\t},",
				"",
				"\tfire: function(o, thisObj) {",
					"\t\tvar scope = thisObj || window;",
					"\t\tthis.handlers.forEach(function(item) {",
						"\t\t\titem.call(scope, o);",
					"\t\t});",
				"\t}",
			"}",
			"",
			"// log helper",
			"",
			"var log = (function() {",
				"\tvar log = \"\";",
				"\treturn {",
					"\t\tadd: function(msg) { log += msg + \"\"; },",
					"\t\tshow: function() { alert(log); log = \"\"; }",
				"\t}",
			"})();",
			"",
			"function run() {",
				"\tvar clickHandler = function(item) {" ,
					"\t\tlog.add(\"fired: \" + item); ",
				"\t};",
				"",
				"\tvar click = new Click();",
				"\tclick.subscribe(clickHandler);",
				"\tclick.fire('event #1');",
				"\tclick.unsubscribe(clickHandler);",
				"\tclick.fire('event #2');",
				"\tclick.subscribe(clickHandler);",
				"\tclick.fire('event #3');",
				"",
				"\tlog.show();",
			"}"
		],
		"description": "Code snippet for observer design pattern."
	}
}
