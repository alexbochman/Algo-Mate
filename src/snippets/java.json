
{
    "Singleton": {
        "prefix": "singleton",
        "body": [
            "class SingleObject {",
            "\t//create an object of SingleObject",
            "\tprivate static SingleObject instance = new SingleObject();",
            " ",
            "\t//make the constructor private so that this class cannot be instantiated",
            "\tprivate SingleObject(){}",
            " ",
            "\t//Get the only object available",
            "\tpublic static SingleObject getInstance(){",
            "\t\treturn instance;",
            "\t}",
            " ",
            "\tpublic void showMessage(){",
            "\t\tSystem.out.println(\"Hello World!\");",
            "\t}",
            "}",
            "// ====================== SINGLETON DEMO ======================",
            " ",
            "public class SingletonPatternDemo {",
            "\tpublic static void main(String[] args) {",
            " ",
            "\t\t//illegal construct",
            "\t\t//Compile Time Error: The constructor SingleObject() is not visible",
            "\t\t//SingleObject object = new SingleObject();",
            " ",
            "\t\t//Get the only object available",
            "\t\tSingleObject object = SingleObject.getInstance();",
            " ",
            "\t\t//show the message",
            "\t\tobject.showMessage();",
            "\t}",
            "}"
        ],
        "description": "Code snippet for singleton design pattern."
    },
    "Adapter": {
        "prefix": "adapter",
        "body": [
            "// Creates interfaces for Item and Advanced item",
            "interface Item {",
            "\tpublic void create(String type, String fileName);",
            "}",
            "",
            "interface AdvancedItem {",
            "\tpublic void createType1(String fileName);",
            "\t\tpublic void createType2(String fileName);",
            "}",
            "",
            "",
            "// Create concrete classes implementing the AdvancedItem interface",
            "class Type1_Item implements AdvancedItem{",
            "",
            "\t@Override",
            "\tpublic void createType1(String fileName) {",
            "\t\tSystem.out.println(\"Creating Type 1 File. Name: \"+ fileName);",
            "\t}",
            "",
            "\t@Override",
            "\tpublic void createType2(String fileName) {",
            "\t\t//do nothing",
            "\t}",
            "}",
            "",
            "class Type2_Item implements AdvancedItem{",
            "",
            "\t@Override",
            "\tpublic void createType1(String fileName) {",
            "\t\t//do nothing",
            "\t}",
            "",
            "\t@Override",
            "\tpublic void createType2(String fileName) {",
            "\t\tSystem.out.println(\"Creating Type 2 File. Name: \"+ fileName);",
            "\t}",
            "}",
            "",
            "// Create adapter class implementing the Item interface.",
            "class Adapter implements Item {",
            "",
            "\tAdvancedItem advancedItem;",
            "",
            "\tpublic Adapter(String type){",
            "",
            "\t\tif(type.equalsIgnoreCase(\"Type 1\") ){",
            "\t\t\tadvancedItem = new Type1_Item();",
            "",
            "\t\t}else if (type.equalsIgnoreCase(\"Type 2\")){",
            "\t\t\tadvancedItem = new Type2_Item();",
            "\t\t}",
            "\t}",
            "",
            "\t@Override",
            "\tpublic void create(String type, String fileName) {",
            "",
            "\t\tif(type.equalsIgnoreCase(\"Type 1\")){",
            "\t\t\tadvancedItem.createType1(fileName);",
            "\t\t}",
            "\t\telse if(type.equalsIgnoreCase(\"Type 2\")){",
            "\t\t\tadvancedItem.createType2(fileName);",
            "\t\t}",
            "\t}",
            "}",
            "",
            "// Create concrete class implementing the Item interface",
            "class CombineTypes implements Item {",
            "\tAdapter adapter;",
            "",
            "\t@Override",
            "\tpublic void create(String type, String fileName) {",
            "",
            "\t\t//inbuilt support to create type x files",
            "\t\tif(type.equalsIgnoreCase(\"Type X\")){",
            "\t\t\tSystem.out.println(\"Createing Type X file. Name: \" + fileName);",
            "\t\t}",
            "",
            "\t\t//adapter is providing support to create other file formats",
            "\t\telse if(type.equalsIgnoreCase(\"Type 1\") || type.equalsIgnoreCase(\"Type 2\")){",
            "\t\t\tadapter = new Adapter(type);",
            "\t\t\tadapter.create(type, fileName);",
            "\t\t}",
            "",
            "\t\telse{",
            "\t\t\tSystem.out.println(\"Invalid Item. \" + type + \" not supported\");",
            "\t\t}",
            "\t}",
            "}",
            "",
            "// Use the CombineTypes to create different types of items.",
            "public class AdapterPatternDemo {",
            "\tpublic static void main(String[] args) {",
            "\t\tCombineTypes combineTypes = new CombineTypes();",
            "",
            "\t\tcombineTypes.create(\"Type X \", \"item.x\");",
            "\t\tcombineTypes.create(\"Type 2\", \"item.2\");",
            "\t\tcombineTypes.create(\"Type 1\", \"item.1\");",
            "\t\tcombineTypes.create(\"Type X\", \"item.x\");",
            "\t}",
            "}",
            ""
        ],
        "description": "Code snippet for adapter design pattern."
    },
    "Observer": {
        "prefix": "observer",
        "body": [
            "import java.util.ArrayList;",
            "import java.util.List;",
            "",
            "// Create Subject Class.",
            "class Subject {",
            "",
            "\tprivate List<Observer> observers = new ArrayList<Observer>();",
            "\tprivate int state;",
            "",
            "\tpublic int getState() {",
            "\t\treturn state;",
            "\t}",
            "",
            "\tpublic void setState(int state) {",
            "\t\tthis.state = state;",
            "\t\tnotifyAllObservers();",
            "\t}",
            "",
            "\tpublic void attach(Observer observer){",
            "\t\tobservers.add(observer);",
            "\t}",
            "",
            "\tpublic void notifyAllObservers(){",
            "\t\tfor (Observer observer : observers) {",
            "\t\t\tobserver.update();",
            "\t\t}",
            "\t}",
            "}",
            "",
            "// Create Observer Class",
            "abstract class Observer {",
            "\tprotected Subject subject;",
            "\tpublic abstract void update();",
            "}",
            "",
            "// Create concrete observer classes",
            "class BinaryObserver extends Observer{",
            "",
            "\tpublic BinaryObserver(Subject subject){",
            "\t\tthis.subject = subject;",
            "\t\tthis.subject.attach(this);",
            "\t}",
            "",
            "\t@Override",
            "\tpublic void update() {",
            "\t\tSystem.out.println( \"Binary String: \" + Integer.toBinaryString( subject.getState() ) );",
            "\t}",
            "}",
            "",
            "class OctalObserver extends Observer{",
            "",
            "\tpublic OctalObserver(Subject subject){",
            "\t\tthis.subject = subject;",
            "\t\tthis.subject.attach(this);",
            "\t}",
            "",
            "\t@Override",
            "\tpublic void update() {",
            "\t\tSystem.out.println( \"Octal String: \" + Integer.toOctalString( subject.getState() ) );",
            "\t}",
            "}",
            "",
            "class HexaObserver extends Observer{",
            "",
            "\tpublic HexaObserver(Subject subject){",
            "\t\tthis.subject = subject;",
            "\t\tthis.subject.attach(this);",
            "\t}",
            "",
            "\t@Override",
            "\tpublic void update() {",
            "\t\tSystem.out.println( \"Hex String: \" + Integer.toHexString( subject.getState() ).toUpperCase() );",
            "\t}",
            "}",
            "",
            "// Use subject and concrete observer objects",
            "public class ObserverPatternDemo {",
            "",
            "\tpublic static void main(String[] args) {",
            "\t\tSubject subject = new Subject();",
            "",
            "\t\tnew HexaObserver(subject);",
            "\t\tnew OctalObserver(subject);",
            "\t\tnew BinaryObserver(subject);",
            "",
            "\t\tSystem.out.println(\"First state change: 15\");",
            "\t\tsubject.setState(15);",
            "\t\tSystem.out.println(\"Second state change: 10\");",
            "\t\tsubject.setState(10);",
            "\t}",
            "}"
        ],
        "description": "Code snippet for observer design pattern."
    },
    "Builder": {
        "prefix": "builder",
        "body": [
            "import java.util.ArrayList;",
            "import java.util.List;",
            "",
            "// Create an interface representing an item and a block of items.",
            "interface Item {",
            "\tpublic String name();",
            "\tpublic Block block();",
            "\tpublic float item_id();",
            "}",
            "",
            "interface Block {",
            "\tpublic String block();",
            "}",
            "",
            "// Create concrete classes implementing the Block Interface",
            "class Wrapper implements Block{",
            "\t@Override",
            "\tpublic String block() {",
            "\t\treturn \"Wrapper\";",
            "\t}",
            "}",
            "",
            "class ItemType implements Block {",
            "\t@Override",
            "\tpublic String block() {",
            "\t\treturn \"Different type of item within block\";",
            "\t}",
            "}",
            "",
            "// Create abstract classes implementing the item interface providing default functionalities.",
            "abstract class ItemType_X implements Item {",
            "\t// @Override",
            "\t// public Block blocking() {",
            "\t//     return new Wrapper();",
            "\t// }",
            "",
            "\t@Override",
            "\tpublic abstract float item_id();",
            "}",
            "",
            "abstract class ItemType_Y implements Item {",
            "\t@Override",
            "\tpublic Block block() {",
            "\t\treturn new ItemType();",
            "\t}",
            "",
            "\t@Override",
            "\tpublic abstract float item_id();",
            "}",
            "",
            "// Create concrete classes extending ItemType_X and ItemType_Y classes",
            "class Item_A extends ItemType_X {",
                "\t@Override",
                "\tpublic float item_id() {",
                "\t\treturn 1.0f;",
                "\t}",
                "",
                "\t@Override",
                "\tpublic Block block() {",
                "\t\treturn new ItemType();",
                "\t}",
                "",
                "\t@Override",
                "\tpublic String name() {",
                "\t\treturn \"Item Type A\";",
                "\t}",
                "}",
                "",

            "class Item_B extends ItemType_X {",
            "\t@Override",
            "\tpublic float item_id() {",
            "\t\treturn 1.1f;",
            "\t}",
            "",
            "\t@Override",
            "\tpublic Block block() {",
            "\t\tItemType object = new ItemType();",
            "\t\treturn object;",
            "\t}",
            "",
            "\t@Override",
            "\tpublic String name() {",
            "\t\treturn \"Item Type B\";",
            "\t}",
            "}",
            "",
            "class Item_C extends ItemType_Y {",
            "\t@Override",
            "\tpublic float item_id() {",
            "\t\treturn 2.0f;",
            "\t}",
            "",
            "\t@Override",
            "\tpublic String name() {",
            "\t\treturn \"Item Type C\";",
            "\t}",
            "}",
            "",
            "class Item_D extends ItemType_Y {",
            "\t@Override",
            "\tpublic float item_id() {",
            "\t\treturn 2.1f;",
            "\t}",
            "",
            "\t@Override",
            "\tpublic String name() {",
            "\t\treturn \"Item Type D\";",
            "\t}",
            "}",
            "",
            "",
            "// Create a Combine class having Item objects defined above.",
            "class Combine {",
            "\tprivate List<Item> items = new ArrayList<Item>();",
            "",
            "\tpublic void addItem(Item item) {",
            "\t\titems.add(item);",
            "\t}",
            "",
            "\tpublic void showItems() {",
            "\t\tfor (Item item: items) {",
            "\t\t\tSystem.out.print(\"Item: \" + item.name());",
            "\t\t\tSystem.out.print(\", Block: \" + item.block());",
            "\t\t\tSystem.out.println(\", Item ID: \" + item.item_id());",
            "\t\t}",
            "\t}",
            "}",
            "",
            "// Create a Builder class, the actual builder class responsible to crate Combined objects",
            "class Builder {",
            "",
            "\tpublic Combine createBlock_A() {",
            "\t\tCombine object_A = new Combine();",
            "\t\tobject_A.addItem(new Item_A());",
            "\t\tobject_A.addItem(new Item_C());",
            "\t\treturn object_A;",
            "\t}",
            "",
            "\tpublic Combine createBlock_B() {",
            "\t\tCombine object_B = new Combine();",
            "\t\tobject_B.addItem(new Item_B());",
            "\t\tobject_B.addItem(new Item_D());",
            "\t\treturn object_B;",
            "\t}",
            "}",
            "",
            "",
            "// BuilderPatternDemo uses Builder to demonstrate builder pattern.",
           "public class BuilderPatternDemo {",
           "",
           "\tpublic static void main(String[] args) {",
           "",
           "\t\tBuilder blockBuilder = new Builder();",
            "",
            "\t\tCombine block_a = blockBuilder.createBlock_A();",
            "\t\tSystem.out.println(\"Block A:\");",
            "\t\tblock_a.showItems();",
            "",
            "\t\tCombine block_b = blockBuilder.createBlock_B();",
            "\t\tSystem.out.println(\"Block B:\");",
            "\t\tblock_b.showItems();",
            "\t}",
            "}"
        ],
        "description": "Code snippet for builder design pattern"
    }

}
