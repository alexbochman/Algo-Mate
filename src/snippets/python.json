{
    "Singleton": {
        "prefix": "singleton",
        "body": [
            "class Singleton:",
            "\t#Basic Singleton Implementation",
            "",
            "\t__instance = None",
            "",
            "\tdef __init__(self):",
            "\t\t#SPrivate Constructor",
            "\t\tif Singleton.__instance != None:",
            "\t\t\traise Exception (\"This is a Singleton class.\")",
            "\t\telse:",
            "\t\t\tSingleton.__instance = self",
            "",
            "\t@staticmethod",
            "\tdef getInstance():",
            "\t\t#Static Access to Singleton",
            "\t\tif Singleton.__instance == None:",
            "\t\t\tSingleton()",
            "\t\treturn Singleton.__instance",
            "",
            "#====================== SINGLETON DEMO ======================#",
            "if __name__ == \"__main__\":",
            "\t#Create Singleton class",
            "\ttester = Singleton()",
            "\tprint(tester)",
            "",
            "\t#Get the instance of the Singleton",
            "\ttester = Singleton.getInstance()",
            "\tprint(tester)",
            ""
        ],
        "description": "Code snippet for singleton design pattern."
    },
    "Builder": {
        "prefix": "builder",
        "body": [
            "from __future__ import annotations",
            "from abc import ABC, abstractmethod, abstractproperty",
            "from typing import Any",
            "",
            "",
            "class Builder(ABC):",
            "\t#Builder class to specify methods for creating different",
            "\t#parts of the products used to create the builder",
            "",
            "\t@abstractproperty",
            "\tdef product(self) -> None:",
            "\t\tpass",
            "",
            "\t@abstractmethod",
            "\tdef produce_part_a(self) -> None:",
            "\t\tpass",
            "",
            "\t@abstractmethod",
            "\tdef produce_part_b(self) -> None:",
            "\t\tpass",
            "",
            "\t@abstractmethod",
            "\tdef produce_part_c(self) -> None:",
            "\t\tpass",
            "",
            "",
            "class ConcreteBuilder1(Builder):",
            "\t#Concrete builder used to build the desired implementation",
            "",
            "\tdef __init__(self) -> None:",
            "\t\tself.reset()",
            "",
            "\tdef reset(self) -> None:",
            "\t\tself._product = Product1()",
            "",
            "\t@property",
            "\tdef product(self) -> Product1:",
            "\t\tproduct = self._product",
            "\t\tself.reset()",
            "\t\treturn product",
            "",
            "\tdef produce_part_a(self) -> None:",
            "\t\tself._product.add(\"PartA1\")",
            "",
            "\tdef produce_part_b(self) -> None:",
            "\t\tself._product.add(\"PartB1\")",
            "",
            "\tdef produce_part_c(self) -> None:",
            "\t\tself._product.add(\"PartC1\")",
            "",
            "",
            "class Product1():",
            "\tdef __init__(self) -> None:",
            "\t\tself.parts = []",
            "",
            "\tdef add(self, part: Any) -> None:",
            "\t\tself.parts.append(part)",
            "",
            "\tdef list_parts(self) -> None:",
            "\t\tprint(f\"Product parts: {', '.join(self.parts)}\", end=\"\")",
            "",
            "class Director:",
            "\t#Director executes the building steps in a sequence",
            "",
            "\tdef __init__(self) -> None:",
            "\t\tself._builder = None",
            "",
            "\t@property",
            "\tdef builder(self) -> Builder:",
            "\t\treturn self._builder",
            "",
            "\t@builder.setter",
            "\tdef builder(self, builder: Builder) -> None:",
            "\t\t#Works based off the given builder instance given by the user code",
            "\t\tself._builder = builder",
            "",
            "\t#Director can construct several product variations using same steps",
            "",
            "\tdef build_minimal_viable_product(self) -> None:",
            "\t\tself.builder.produce_part_a()",
            "",
            "\tdef build_full_featured_product(self) -> None:",
            "\t\tself.builder.produce_part_a()",
            "\t\tself.builder.produce_part_b()",
            "\t\tself.builder.produce_part_c()",
            "",
            "",
            "#====================== BUILDER DEMO ========================#",
            "if __name__ == \"__main__\":",
            "\tdirector = Director()",
            "\tbuilder = ConcreteBuilder1()",
            "\tdirector.builder = builder",
            "",
            "\tprint(\"Standard basic product: \")",
            "\tdirector.build_minimal_viable_product()",
            "\tbuilder.product.list_parts()",
            "",
            "\tprint(\"\\n\")",
            "",
            "\tprint(\"Standard full featured product: \")",
            "\tdirector.build_full_featured_product()",
            "\tbuilder.product.list_parts()",
            "",
            "\tprint(\"\\n\")",
            "",
            "\t#Use Builder without the Director Class",
            "\tprint(\"Customer product: \")",
            "\tbuilder.produce_part_a()",
            "\tbuilder.produce_part_b()",
            "\tbuilder.product.list_parts()",
            ""
        ],
        "description": "Code snippet for builder design pattern."
    },
    "Adapter": {
        "prefix": "adapter",
        "body": [
            "class Target:",
            "\t#Target will set domain-specific interface by the user input",
            "\tdef request(self) -> str:",
            "\t\treturn \"Target: The default target's behavior.\"",
            "",
            "",
            "class Adaptee:",
            "\t#This adaptee will contain a reverse string",
            "\tdef specific_request(self) -> str:",
            "\t\treturn \".gnirtS sdrawkcaB\"",
            "",
            "",
            "class Adapter(Target, Adaptee):",
            "\t#Adapter class that makes the Adaptee compatile with the given interface",
            "\tdef request(self) -> str:",
            "\t\treturn f\"Adapter: (TRANSLATED) {self.specific_request()[::-1]}\"",
            "",
            "",
            "def user_code(target: \"Target\") -> None:",
            "\t#User code to support all classes that use the Target interface.",
            "\tprint(target.request(), end=\"\")",
            "",
            "",
            "#====================== ADAPTER DEMO ========================#",
            "if __name__ == \"__main__\":",
            "\tprint(\"Client: I can work just fine with the Target objects\")",
            "\ttarget = Target()",
            "\tuser_code(target)",
            "\tprint(\"\\n\")",
            "",
            "\tadaptee = Adaptee()",
            "\tprint(\"Client: The Adaptee class has a different interface. \")",
            "\tprint(f\"Adaptee: {adaptee.specific_request()}\", end=\"\\n\\n\")",
            "",
            "\tprint(\"User: The user can make the Adaptee work by calling the Adapter\")",
            "\tadapter = Adapter()",
            "\tuser_code(adapter)",
            ""
        ],
        "description": "Code snippet for adapter design pattern."
    },
    "Observer": {
        "prefix": "observer",
        "body": [
            "from __future__ import annotations",
            "from abc import ABC, abstractmethod",
            "from random import randrange",
            "from typing import List",
            "",
            "",
            "class Subject(ABC):",
            "\t#Subject interface. Contains methods for managing subjects.",
            "",
            "\t@abstractmethod",
            "\tdef attach(self, observer: Observer) -> None:",
            "\t\t#Attaches an observer to the subject",
            "\t\tpass",
            "",
            "\t@abstractmethod",
            "\tdef detach(self, observer: Observer) -> None:",
            "\t\t#Detaches an observer from the subject",
            "\t\tpass",
            "",
            "\t@abstractmethod",
            "\tdef notify(self) -> None:",
            "\t\t#Notify all observers about an event happening",
            "\t\tpass",
            "",
            "",
            "class ConcreteSubject(Subject):",
            "\t#Subject owns the important state and notifies the observers when it changes",
            "",
            "\t#Store subject state in this variable",
            "\t_state: int = None",
            "",
            "\t#List of all subscribers",
            "\t_observers: List[Observer] = []",
            "",
            "\tdef attach(self, observer: Observer) -> None:",
            "\t\tprint(\"Subject: Attached an observer.\")",
            "\t\tself._observers.append(observer)",
            "",
            "\tdef detach(self, observer: Observer) -> None:",
            "\t\tself._observers.remove(observer)",
            "",
            "\t#Subscriber management methods",
            "",
            "\tdef notify(self) -> None:",
            "\t\t#Notify all subscribers",
            "\t\tprint(\"Subject: Notifying observers...\")",
            "\t\tfor observer in self._observers:",
            "\t\t\tobserver.update(self)",
            "",
            "\tdef updateState(self) -> None:",
            "\t\t#This is where you would update subscriber info.",
            "\t\t#This is done randomly in this example.",
            "\t\tprint(\"\\nSubject: Updating current state...\")",
            "\t\tself._state = randrange(0, 10)",
            "",
            "\t\tprint(f\"Subject: The state has changed to: {self._state}\")",
            "\t\tself.notify()",
            "",
            "",
            "class Observer(ABC):",
            "\t#Observer interface that declares the update method, used by the subjects",
            "",
            "\t@abstractmethod",
            "\tdef update(self, subject: Subject) -> None:",
            "\t\t#Recieves an update from a subject",
            "\t\tpass",
            "",
            "",
            "class ConcreteObserverA(Observer):",
            "\tdef update(self, subject: Subject) -> None:",
            "\t\tif subject._state < 3:",
            "\t\t\tprint(\"ConcreteObserverA: Reacted to the event\")",
            "",
            "",
            "class ConcreteObserverB(Observer):",
            "\tdef update(self, subject: Subject) -> None:",
            "\t\tif subject._state == 0 or subject._state >= 2:",
            "\t\t\tprint(\"ConcreteObserverB: Reacted to the event\")",
            "",
            "",
            "#====================== OBSERVER DEMO =======================#",
            "if __name__ == \"__main__\":",
            "\tsubject = ConcreteSubject()",
            "",
            "\tobserverA = ConcreteObserverA()",
            "\tsubject.attach(observerA)",
            "",
            "\tobserverB = ConcreteObserverB()",
            "\tsubject.attach(observerB)",
            "",
            "\tsubject.updateState()",
            "\tsubject.updateState()",
            "",
            "\tsubject.detach(observerA)",
            "",
            "\tsubject.updateState()",
            ""
        ],
        "description": "Code snippet for observer design pattern."
    }
}