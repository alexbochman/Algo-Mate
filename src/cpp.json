{
	"Singleton": {
		"prefix": "singleton",
		"body": [
			"// #include <iostream>",
			"// using namespace std;",
			" ",
			"class Singleton {",
			"\tstatic Singleton *instance;",
			"\t${1:int} data;",
			" ",
			"\t// Private constructor so that no objects can be created.",
			"\tSingleton() {",
			"\t\tdata = ${2:0};",
			"\t}",
			" ",
			"public:",
			"\tstatic Singleton *getInstance() {",
			"\t\tif (!instance)",
			"\t\t\tinstance = new Singleton;",
			"\t\treturn instance;",
			"\t}",
			" ",
			"\t${1:int} getData() {",
			"\t\treturn this->data;",
			"\t}",
			" ",
			"\tvoid setData(${1:int} data) {",
			"\t\tthis->data = data;",
			"\t}",
			"};",
			" ",
			"// ====================== SINGLETON DEMO ======================",
			" ",
			"// Singleton *Singleton::instance = 0;",
			" ",
			"//int main() {",
			"\t// Singleton *s = s->getInstance();",
    		"\t// cout << s->getData() << endl;",
    		"\t// s->setData(${3:100});",
    		"\t// cout << s->getData() << endl;",
    		"\t// return 0;",
			"// }"
		],
		"description": "Code snippet for singleton design pattern."
	}

}